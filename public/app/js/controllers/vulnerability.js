(function () {
	'use strict';
	var app = angular.module('app.vulnerability');
	app.service('vulnRowEditor', ['$http', '$rootScope', '$uibModal', function ($http, $rootScope, $uibModal) {
		var service = {};
		service.editRow = editRow;
		service.addRow = addRow;
		service.viewRow = viewRow;

		function editRow(grid, row) {
			$uibModal.open({
				templateUrl: 'app/views/vulnerability-edit.html'
				, controller: 'vulnRowEditCtrl'
				, controllerAs: 'vm'
				, resolve: {
					grid: function () {
						return grid;
					}
					, row: function () {
						return row;
					}
				}
			});
		}

		function viewRow(grid, row) {
			$uibModal.open({
				templateUrl: 'app/views/vulnerability-view.html'
				, controller: 'vulnRowEditCtrl'
				, controllerAs: 'vm'
				, resolve: {
					grid: function () {
						return grid;
					}
					, row: function () {
						return row;
					}
				}
			});
		}

		function addRow(grid, row) {
			$uibModal.open({
				templateUrl: 'app/views/vulnerability-add.html'
				, controller: 'vulnRowEditCtrl'
				, controllerAs: 'vm'
				, resolve: {
					grid: function () {
						return grid;
					}
					, row: function () {
						return row;
					}
				}
			});
		}
		return service;
	}]);
	app.controller('vulnController', ['$scope', '$http', '$uibModal', 'vulnRowEditor', 'uiGridConstants', '$route', '$stateParams', '$state', 'FileSaver', function ($scope, $http, $uibModal, vulnRowEditor, uiGridConstants, $route, $stateParams, $state, FileSaver) {
		var projectID = $stateParams.id;
		var vm = this;
		if(projectID != undefined && projectID != ""){
			var temp = {
				'appType': projectID
			}
			$http.post('/viewProject', temp).then(function (response) {
				$scope.projectData = response.data.data[0];
				var temp = {
				'id': projectID
			}
				$http.post('/viewVuln', temp).then(function (response) {
				$scope.vulnData = response.data.data;
				vm.serviceGrid.data = $scope.vulnData;				
			});				
				
			});
		}
		else{
			$state.go('app.project');		
		}
		$scope.generateReport = function(){
			if($scope.vulnData.length > 0){
				var temp = {
				'id': projectID
			}
			$http.post('/generate', temp).then(function (response) {
				if(response.data.status == 'True'){					
					var temp = {
						filename: response.data.filename
					}
					$http.get('/download?filename='+temp.filename+'', {responseType: 'blob'}).then(function (response) {
						FileSaver.saveAs(response.data, temp.filename + '.docx');
            		});
				}				
			});
			}			
		}


		vm.editRow = vulnRowEditor.editRow;
		vm.addRow = vulnRowEditor.addRow;
		vm.viewRow = vulnRowEditor.viewRow;
		vm.serviceGrid = {
			enableColumnMenus: false,
			enableRowSelection: false
			, enableRowHeaderSelection: false			
			, rowTemplate: "<div ng-dblclick=\"grid.appScope.vm.editRow(grid, row)\" ng-repeat=\"(colRenderIndex, col) in colContainer.renderedColumns track by col.colDef.name\" class=\"ui-grid-cell\" ng-class=\"{ 'ui-grid-row-header-cell': col.isRowHeader }\" ui-grid-cell></div>"
		};
		vm.serviceGrid.seltype = 'None';
		vm.serviceGrid.columnDefs = [{
			name: 'Vulnerability Name'
			, field: 'vulName'
			, enableSorting: false
			, enableCellEdit: false
		},
		{
				name: 'Owasp Name'
				, field: 'owaspName'
				, enableSorting: false
				, enableCellEdit: false
		},
		{
				name: 'Risk'
				, field: 'risk'
				, enableSorting: false
				, enableCellEdit: false
		}, 
		{
	            field: "View",
	            width: 100,
	            displayName: "View",
	            cellTemplate: '<center><button class="btn btn-oval btn-success" ng-click="grid.appScope.vm.viewRow(grid, row)" style="height: 28px;padding: 2px 23px 3px 21px;">View</button></center>'
	    },
	    {
	            field: "Edit",
	            width: 100,            
	            displayName: "Edit",
	            cellTemplate: '<center><button class="btn btn-oval btn-success" ng-click="grid.appScope.vm.editRow(grid, row)" style="height: 28px;padding: 2px 23px 3px 21px;">Edit</button></center>'
	    }];
		vm.addVulnerability = function () {
			var rowTmp = {};
			var newService = {
				"projectID" : "",
				"vulName" : "",
				"appType" : "",
				"owaspName" : "",
				"vulDetail" : "",
				"vulRecommend" : "",
				"risk" : "",
				"severity" : "",
				"cvscore" : "",
				"cvtext" : "",
				"probability" : "",
				"remeffort" : "",
				"vector" : "",
				"occurrences" : "",
				"affcomp" : "",
				"retest" : "",
				"other" : "",
				"proofExploit": ""
			};
			rowTmp.entity = newService;
			vm.addRow(vm.serviceGrid, rowTmp);
		};
	}]);
	app.controller('vulnRowEditCtrl', ['$http', '$uibModalInstance', 'grid', 'row', '$window', '$state', 'Upload', '$scope', '$stateParams', 'Notify', function ($http, $uibModalInstance, grid, row, $window, $state, Upload, $scope,$stateParams, Notify) {
		var projectID = $stateParams.id;
		var appType = $stateParams.appType;
		if(projectID == undefined || projectID == ""){
			$state.go('app.project');
		}				
		$scope.vul= {};
		$scope.vul = angular.copy(row.entity);
		$scope.vul.projectID=projectID;		
		$scope.vul.appType = appType;
		$scope.vul.vulimgpath = [];

		$scope.getimage = function(vulID){
			var tempVulGetImg = {
				'vid': vulID
			}
			$http.post('/viewVulGetImg', tempVulGetImg).then(function (response) {
				for (var i = 0; i < response.data.data.length; i++) {
					$scope.vul.vulimgpath.push(response.data.data[i].imgpath);
				}
			});
		}
		if($scope.vul.vulID != undefined){
			$scope.getimage($scope.vul.vulID);
		}		
		
		var temp = {
				'appType': $scope.vul.appType
			}
		$http.post('/viewOwasp', temp).then(function (response) {
			$scope.owaspData = response.data.data;				
		});

		$scope.owaspSelect = function(data){
			for(var i =0; i<$scope.owaspData.length; i++){
				if($scope.owaspData[i].vulName == data){
					$scope.vul.owaspName = $scope.owaspData[i].owaspName;
					$scope.vul.vulDetail = $scope.owaspData[i].vulDetail;
					$scope.vul.vulRecommend = $scope.owaspData[i].vulRecommend;

				}				
			}			
		}		

		var vm = this;
		vm.entity = angular.copy(row.entity);
		vm.save = save;
		vm.update = update;
		vm.remove = remove;		

		function save(files) {			
			Upload.upload({
      		url: '/addVuln',
      		arrayKey: '',
      		data: {
				"projectID" : $scope.vul.projectID,
				"vulName" : $scope.vul.vulName,
				"appType" : $scope.vul.appType,
				"owaspName" : $scope.vul.owaspName,
				"vulDetail" : $scope.vul.vulDetail,
				"vulRecommend" : $scope.vul.vulRecommend,
				"risk" : $scope.vul.risk,
				"severity" : $scope.vul.severity,
				"cvscore" : $scope.vul.cvscore,
				"cvtext" : $scope.vul.cvtext,
				"probability" : $scope.vul.probability,
				"remeffort" : $scope.vul.remeffort,
				"vector" : $scope.vul.vector,
				"occurrences" : $scope.vul.occurrences,
				"affcomp" : $scope.vul.affcomp,
				"retest" : $scope.vul.retest,
				"other" : $scope.vul.other,
				"proofExploit": files
			}
    		}).then(function (response) {
    			if(response.data.status == 'True'){
					Notify.alert('Vulnerability Added Successful', { status: 'success' });
				}
    			$scope.vul.vulID = response.data.vid;
    			grid.data.push($scope.vul);
                $uibModalInstance.close(row.entity);
            }, function (response) {
                
            }, function (evt) {
                
            });
		}

		function update(files) {			
			Upload.upload({
      		url: '/editVuln',
      		arrayKey: '',
      		data: {
      			"id": $scope.vul.vulID,
				"projectID" : $scope.vul.projectID,
				"vulName" : $scope.vul.vulName,
				"appType" : $scope.vul.appType,
				"owaspName" : $scope.vul.owaspName,
				"vulDetail" : $scope.vul.vulDetail,
				"vulRecommend" : $scope.vul.vulRecommend,
				"risk" : $scope.vul.risk,
				"severity" : $scope.vul.severity,
				"cvscore" : $scope.vul.cvscore,
				"cvtext" : $scope.vul.cvtext,
				"probability" : $scope.vul.probability,
				"remeffort" : $scope.vul.remeffort,
				"vector" : $scope.vul.vector,
				"occurrences" : $scope.vul.occurrences,
				"affcomp" : $scope.vul.affcomp,
				"retest" : $scope.vul.retest,
				"other" : $scope.vul.other,
				"proofExploit": files
			}
    		}).then(function (response) {
    			if(response.data.status == 'True'){
					Notify.alert('Vulnerability Update Successful', { status: 'success' });
				}
    			
				row.entity.vulName = $scope.vul.vulName;				
				row.entity.owaspName = $scope.vul.owaspName;
				row.entity.vulDetail = $scope.vul.vulDetail;
				row.entity.vulRecommend = $scope.vul.vulRecommend;
				row.entity.risk = $scope.vul.risk;
				row.entity.severity = $scope.vul.severity;
				row.entity.cvscore = $scope.vul.cvscore;
				row.entity.cvtext = $scope.vul.cvtext;
				row.entity.probability = $scope.vul.probability;
				row.entity.remeffort = $scope.vul.remeffort;
				row.entity.vector = $scope.vul.vector;
				row.entity.occurrences = $scope.vul.occurrences;
				row.entity.affcomp = $scope.vul.affcomp;
				row.entity.retest = $scope.vul.retest;
				row.entity.other = $scope.vul.other;    			    			
                $uibModalInstance.close(row.entity);
            }, function (response) {
                
            }, function (evt) {
                
            });
		}		
		
		function remove() {
			var temp = {
				"id": vm.entity.vulID
			}
			$http.post('/deleteVuln', temp).then(function (response) {
				if(response.data.status == 'True'){
					Notify.alert('Vulnerability Deleted Successfully', { status: 'success' });
				}
				$state.go($state.current, {}, {
					reload: true
				});
				$uibModalInstance.close(row.entity);				
			});			
		}
		$scope.removeImage = function(image, index){
			temp = {
				"path": image
			}
			$http.post('/deleteProof', temp).then(function (response) {
				if(response.data.status == 'True'){
					$scope.vul.vulimgpath.splice(index, 1);

					Notify.alert('Image Removed Successful', { status: 'success' });
				
				}
				
			});
		}
	}]);
})();